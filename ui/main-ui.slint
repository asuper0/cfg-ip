import { LineEdit , Button, CheckBox, VerticalBox, HorizontalBox, ListView, StandardListView, GridBox, AboutSlint} from "std-widgets.slint";
import { IpV4, NetAddress, NetInterfaceItem, InterfaceUiItem, InterfaceItemCheck, InterfaceEdit, NetItemUtils } from "interface-item.slint";
import { PopMessageBox } from "pop-message.slint";
import { HelpInfo } from "help-info.slint";
import { Light } from "light.slint";
import { CustomListView } from "listview.slint";
export { InterfaceItemCheck, NetItemUtils }

export global NetInterfaceStatus {
    in-out property <[NetInterfaceItem]> interface-infos: [
        {name: "test1", is-up: true},
        {name: "test2", is-up: false},
        {name: "test3", is-up: true},
        {name: "test4", is-up: false},
        {name: "test5", is-up: true},
        {name: "test6", is-up: false},
    ]; 
    in-out property <[StandardListViewItem]> interface-names;
    in-out property <int> selected-index;
    in-out property <[NetInterfaceItem]> saved-settings; 
    in-out property <[StandardListViewItem]> saved-names: [
        {text: "test1" },
        {text: "test2" },
        {text: "test3" },
        {text: "test4" },
        {text: "test5" },
        {text: "test6" },
    ];
}

export component Main inherits Window {
    preferred-width: 1280px;
    preferred-height: 720px;

    in-out property <bool> select-system-adapter : false;
    out property <string> selected_guid;

    public function select-system(index:int) {
        listview-system.select(index);
    }

    public function show-message-box(title:string, text:string) {
        message-box.title = title;
        message-box.text = text;
        message-box.visible = true;
        message-box.focus();

        message-box.content-width = 300px;
        message-box.content-height = 160px;
    }


    callback set-static(string, NetInterfaceItem);
    callback set-dynamic(string);
    callback refresh-adapters();
    callback load-selected(NetInterfaceItem);
    callback remove-selected(int);
    callback apply-config(NetInterfaceItem, bool, [string]);
    callback save-config(NetInterfaceItem, bool, [string]);

    in property <string> window-title: "Config Ip Tool";
    title: window-title;

    HorizontalBox {
        Rectangle {
            border-width: 1px;
            border-color: #666;
            border-radius: 8px;
            width: parent.width * 0.4;

            VerticalBox {
                HorizontalLayout {
                    spacing: 6px;
                    Text {text: "Edit interface"; max-height: 20px; vertical-alignment: center;}
                    Rectangle { horizontal-stretch: 2;}
                    Button {text: "Help"; clicked => {
                        show-message-box("Help", help-info.content);
                        message-box.content-width = 840px;
                        message-box.content-height = 360px;
                    }}
                    help-info := HelpInfo{ width: 0; height: 0;}
                    Button { text: "About Slint"; clicked => { about-box.visible = true; } }
                }
                HorizontalBox {
                    Button {text: "Apply"; clicked => {
                        apply-config(curr.value, curr.dhcp-on, curr.get-items());
                    }}
                    Button {text: "Save"; clicked => {
                        save-config(curr.value, curr.dhcp-on, curr.get-items());
                    }}
                    Button {text: "Load selected"; clicked => {
                        curr.select-item(show-setting.value);
                    }}
                }

                curr := InterfaceEdit { }
            }
        }

        Rectangle {
            border-width: 1px;
            border-color: #666;
            border-radius: 8px;

            GridBox {
                Row {
                    Text {text: "Adapters"; max-height: 20px; vertical-alignment: center;}
                    Button {text: "Refresh"; clicked => { root.refresh-adapters(); }}
                }
                Row {
                    listview-system := CustomListView { 
                        colspan: 2;
                        model: NetInterfaceStatus.interface-infos;

                        selection-changed(index, item) => {
                            show-setting.value = item;
                            root.select-system-adapter = true;
                            root.selected-guid = item.guid;
                            le-selected-item.text = "Adapter : " + item.name;
                        }
                    }
                }
                Row {
                    Rectangle {
                        colspan: 2;
                        height: 3px;
                        background: @linear-gradient(90deg, #e99 0%, #9e9 50%, #99e 100%);
                    }
                }
                Row {
                    Text {text: "Saved settings"; max-height: 20px; vertical-alignment: center;}
                    Button {text: "Remove"; clicked => {
                        if (listview-saved.current-item >= 0) {
                            root.remove-selected(listview-saved.current-item);
                        }
                    }}
                }
                Row {
                    listview-saved := StandardListView { 
                        colspan: 2;
                        model: NetInterfaceStatus.saved-names;
                        current-item-changed(index) => {
                            if (index>=0 && index < NetInterfaceStatus.saved-settings.length) {
                                show-setting.value = NetInterfaceStatus.saved-settings[index];
                                root.select-system-adapter = false;
                                root.selected-guid = show-setting.value.guid;
                                le-selected-item.text = "Saved : " + show-setting.value.name;
                            }
                        }
                    }
                }

            }
            
        }

        Rectangle {
            border-width: 1px;
            border-color: #666;
            border-radius: 8px;
            width: parent.width * 0.4;

            VerticalBox {
                HorizontalBox {
                    Text {text: "Selected Item"; vertical-alignment: center;}
                    le-selected-item := LineEdit { read-only: true; }
                }

                show-setting := InterfaceUiItem { 
                    read-only: true;
                }
            }

        }
    }

    message-box := PopMessageBox{ }

    about-box := Rectangle{
        visible: false;
        Rectangle {
            width: 280px;
            height: 180px;

            y: (parent.height - self.height) / 2;
            border-radius: 32px;
            border-color: #333;
            background: #888;

            AboutSlint{

            }
        }
        TouchArea {
            clicked => {
                parent.visible = false;
            }
        }
    }
    
}
